name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_NAME: photonic-ai-system
  APP_VERSION: 1.0.0

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run quality gates
      run: |
        python validate_system.py
        
    - name: Security scan
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.APP_NAME }}:${{ env.APP_VERSION }} .
        
    - name: Push to registry
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push ${{ env.APP_NAME }}:${{ env.APP_VERSION }}
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl set image deployment/photonic-ai-deployment photonic-ai=${{ env.APP_NAME }}:${{ env.APP_VERSION }}
        kubectl rollout status deployment/photonic-ai-deployment
        
    - name: Run health checks
      run: |
        curl -f https://photonic-ai.com/health
